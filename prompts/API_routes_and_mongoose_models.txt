const express = require('express');
const router = express.Router();
const User = require('../models/User');

// Get all users
router.get('/', authorizeAdmin, async (req, res) => {
    const users = await User.find();
    res.json(users);
});

// Get single user
router.get('/:userId', authorizeAdmin, async (req, res) => {
    const user = await User.findById(req.params.userId);
    res.json(user);
});

// Register new user
router.post('/register', async (req, res) => {
    try {
        const { password, ...rest } = req.body;

        const hashedPassword = await bcrypt.hash(password, 10);

        const newUser = new User({
            ...rest,
            password: hashedPassword
        });

        const saved = await newUser.save();
        res.status(201).json(saved);
    } catch (err) {
        res.status(400).json({ error: err.message });
    }
});

// Login (mock - replace with real auth)
router.post('/login', async (req, res) => {
    const { email, password } = req.body;
    console.log(email, password)
    const user = await User.findOne({ email });
    if (!user || !(await bcrypt.compare(password, user.password))) {
        return res.status(401).json({ error: 'Invalid credentials' });
    }

    const userRole = (user.isAdmin) ? "admin" : "standard"

    const token = jwt.sign(
        { id: user._id, email: user.email, role: userRole },
        process.env.SECRET_KEY,
        { expiresIn: '1h' }
    );

    res.json({ token });
});

// Update user
router.put('/:userId', authorizeStandard, async (req, res) => {
    const user = await User.findByIdAndUpdate(req.params.userId, req.body, { new: true });
    res.json(user);
});

// Delete user
router.delete('/:userId', authorizeAdmin, async (req, res) => {
    await User.findByIdAndDelete(req.params.userId);
    res.sendStatus(204);
});

module.exports = router;

const mongoose = require('mongoose');

const userSchema = new mongoose.Schema({
    username: { type: String, required: true, unique: true },
    email:    { type: String, required: true, unique: true },
    password: { type: String, required: true },
    firstName: String,
    lastName: String,
    address: {
        street: String,
        city: String,
        state: String,
        zip: String,
        country: String
    },
    phone: String,
    isAdmin: { type: Boolean, default: false },
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('User', userSchema);


const express = require('express');
const router = express.Router();
const Product = require('../models/Product');

// Configure multer
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        cb(null, 'images/'); // make sure this directory exists
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + path.extname(file.originalname));
    }
});
const upload = multer({ storage });

// Get all products
router.get('/', authorizeStandard, async (req, res) => {
    const products = await Product.find();
    res.json(products);
});

// Get single product
router.get('/:productId', authorizeStandard, async (req, res) => {
    const product = await Product.findById(req.params.productId);
    res.json(product);
});

// Create product with image upload
router.post('/', authorizeAdmin, upload.array('images'), async (req, res) => {
    const imagePaths = req.files.map(file => file.path);
    const newProduct = new Product({
        ...req.body,
        images: imagePaths
    });
    const saved = await newProduct.save();
    res.status(201).json(saved);
});

// Update product
router.put('/:productId', authorizeAdmin, async (req, res) => {
    const product = await Product.findByIdAndUpdate(req.params.productId, req.body, { new: true });
    res.json(product);
});

// Delete product
router.delete('/:productId', authorizeAdmin, async (req, res) => {
    await Product.findByIdAndDelete(req.params.productId);
    res.sendStatus(204);
});

module.exports = router;

const mongoose = require('mongoose');

const sizeSchema = new mongoose.Schema({
    size: { type: String, required: true },
    stock: { type: Number, required: true, min: 0 }
}, { _id: false });

const discountSchema = new mongoose.Schema({
    amount: { type: Number, required: true },
    expiresAt: { type: Date, required: true }
}, { _id: false });

const productSchema = new mongoose.Schema({
    name: { type: String, required: true },
    description: { type: String },
    category: { type: String },
    sizes: [sizeSchema],
    price: { type: Number, required: true },
    discount: discountSchema,
    images: [String],
    tags: [String],
    material: { type: String },
    gender: { type: String },
    ageGroup: { type: String },
    createdAt: { type: Date, default: Date.now },
    updatedAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Product', productSchema);


const express = require('express');
const router = express.Router();
const Order = require('../models/Order');

// Get all orders (admin)
router.get('/', authorizeStandard, async (req, res) => {
    const orders = await Order.find().populate('customerId items.productId');
    res.json(orders);
});

// Get orders by user ID
router.get('/user/:userId', async (req, res) => {
    const orders = await Order.find({ customerId: req.params.userId }).populate('items.productId');
    res.json(orders);
});

// Get single order
router.get('/:orderId', authorizeStandard, async (req, res) => {
    const order = await Order.findById(req.params.orderId).populate('items.productId');
    res.json(order);
});

// Create order
router.post('/', authorizeStandard, async (req, res) => {
    const newOrder = new Order(req.body);
    const saved = await newOrder.save();
    res.status(201).json(saved);
});

// Update order status
router.put('/:orderId/status', authorizeStandard, async (req, res) => {
    const order = await Order.findByIdAndUpdate(req.params.orderId, { status: req.body.status }, { new: true });
    res.json(order);
});

// Delete order
router.delete('/:orderId', authorizeStandard, async (req, res) => {
    await Order.findByIdAndDelete(req.params.orderId);
    res.sendStatus(204);
});

module.exports = router;

const mongoose = require('mongoose');

const orderSchema = new mongoose.Schema({
    customerId: { type: mongoose.Schema.Types.ObjectId, ref: 'User', required: true },
    items: [
        {
            productId: { type: mongoose.Schema.Types.ObjectId, ref: 'Product', required: true },
            quantity: { type: Number, required: true, min: 1 },
            price: { type: Number, required: true }
        }
    ],
    totalAmount: { type: Number, required: true },
    status: { type: String, enum: ['pending', 'processing', 'shipped', 'delivered', 'cancelled'], default: 'pending' },
    shippingAddress: {
        fullName: String,
        addressLine1: String,
        addressLine2: String,
        city: String,
        postalCode: String,
        country: String
    },
    createdAt: { type: Date, default: Date.now }
});

module.exports = mongoose.model('Order', orderSchema);
